#This file was originally generated by PyScripter's unitest wizard

import unittest
from Src.Position import *

class TestPosition(unittest.TestCase):

    def setUp(self):
        self.position0 = Position(0)
        self.position119 = Position(119)
        self.position21 = Position(21)
        self.position98 = Position(98)
        self.position81 = Position(81)

    def tearDown(self):
        pass

    def test_file(self):
        try:
            self.assertEqual(self.position0.file, 0)
            self.assertEqual(self.position119.file, 0) #illegal value
            self.assertEqual(self.position21.file, 1)
            self.assertEqual(self.position98.file, 8)
            self.assertEqual(self.position81.file, 1)
        except Exception as exc:
            print("Position file test : " + exc.__str__())
        finally:
            print("test_file is over")

    def test_rank(self):
        try:
            self.assertEqual(self.position0.rank, 0)
            self.assertEqual(self.position119.rank, 0) #illegal value
            self.assertEqual(self.position21.rank, 1)
            self.assertEqual(self.position98.rank, 8)
            self.assertEqual(self.position81.rank, 7)
        except Exception as exc:
            print("Position rank test : " + exc.__str__())
        finally:
            print("test_rank is over")

    def test__add__(self):
        try:
            position1 = self.position0 + 1
            self.assertEqual(position1.value, 1)
            self.assertEqual(position1.rank, 0)
            self.assertEqual(position1.file, 0) #illegal value
        except Exception as exc:
            print("Test add left from position : " + exc.__str__())
        finally:
            print("test__add__ is over")

    def test__rem__(self):
        try:
            position75 = self.position81 - 6
            self.assertEqual(position75.value, 75)
            self.assertEqual(position75.rank, 6)
            self.assertEqual(position75.file, 5)
        except Exception as exc:
            print("Test remove left from position : " + exc.__str__())
        finally:
            print("test__rem__ is over")

    def test__radd__(self):
        try:
            position1 =  1 + self.position0
            self.assertEqual(position1.value, 1)
            self.assertEqual(position1.rank, 0)
            self.assertEqual(position1.file, 0) #illegal value
        except Exception as exc:
            print("Test add right from position : " + exc.__str__())
        finally:
            print("test__radd__ is over")

    def test__rsub__(self):
        try:
            position75 =  156 - self.position81
            self.assertEqual(position75.value, 75)
            self.assertEqual(position75.rank, 6)
            self.assertEqual(position75.file, 5)
        except Exception as exc:
            print("Test remove right from position : " + exc.__str__())
        finally:
            print("test__rsub__ is over")

##    def test__iadd__(self):
##        try:
##            self.position0 +=  1
##            self.assertEqual(self.position0.value, 1)
##            self.assertEqual(self.position0.rank, 0)
##            self.assertEqual(self.position0.file, 0) #illegal value
##        except Exception as exc:
##            print("Test add to self position : " + exc.__str__())
##        finally:
##            print("test__iadd__ is over")

##    def test__isub__(self):
##        try:
##            self.position81 -= 6
##            self.assertEqual(self.position81.value, 75)
##            self.assertEqual(self.position81.rank, 6)
##            self.assertEqual(self.position81.file, 'E')
##        except Exception as exc:
##            print("Test remove from self position : " + exc.__str__())
##        finally:
##            print("test__isub__ is over")

if __name__ == '__main__':
    unittest.main()

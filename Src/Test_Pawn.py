#This file was originally generated by PyScripter's unitest wizard

import unittest
from Pawn import *
from Piece import *
from Rook import *
from Queen import *
from King import *
from Bishop import *
from Knight import *

class TestPiece(unittest.TestCase):

    def setUp(self):
        try:
            self.pawn31 = WhitePawn(31)
            self.pawn82 = BlackPawn(82)

            self.piece = Piece(Color.Black, PieceType.Empty, 20)
            self.rook = WhiteRook(21)
            self.knight = WhiteKnight(22)
            self.bishop = WhiteKing(23)
            self.queen = WhiteQueen(24)
            self.king = WhiteKing(25)
        except Exception as exception:
            print(exception)

    def tearDown(self):
        pass

    def test_set_position_positive(self):
        try:
            self.assertEqual(self.pawn31.position.value, 31)
            self.assertEqual(self.pawn82.position.value, 82)
        except Exception as exc:
            print("Set position positive : " + exc.__str__())
        finally:
            print("test_set_position_positive is over")

    def test_set_position_negative(self):
        try:
            self.assertLess(self.pawn31.position.value, 32)
            self.assertLess(81, self.pawn82.position.value)
        except Exception as exc:
            print("Set position negative : " + exc.__str__())
        finally:
            print("test_set_position_negative is over")

    def test_piece_color(self):
        try:
            self.assertEqual(self.pawn31.color, Color.White)
            self.assertEqual(self.pawn82.color, Color.Black)
        except Exception as exc:
            print("Set piece color : " + exc.__str__())
        finally:
            print("test_piece_color is over")

    def test_is_empty(self):
        try:
            self.assertFalse(self.pawn31.is_empty())
            self.assertFalse(self.pawn82.is_empty())

            self.assertTrue(self.piece.is_empty())
            self.assertFalse(self.rook.is_empty())
            self.assertFalse(self.knight.is_empty())
            self.assertFalse(self.bishop.is_empty())
            self.assertFalse(self.queen.is_empty())
            self.assertFalse(self.king.is_empty())
        except Exception as exc:
            print("Is empty method : " + exc.__str__())
        finally:
            print("test_is_empty is over")

    def test_piece_rank(self):
        try:
            self.assertEqual(self.pawn31.position.rank, 2)
            self.assertEqual(self.pawn82.position.rank, 7)

            self.assertEqual(self.piece.position.rank, 0) #illegal value
            self.assertEqual(self.rook.position.rank, 1)
            self.assertEqual(self.knight.position.rank, 1)
            self.assertEqual(self.bishop.position.rank, 1)
            self.assertEqual(self.queen.position.rank, 1)
            self.assertEqual(self.king.position.rank, 1)
        except Exception as exc:
            print("Piece rank test : " + exc.__str__())
        finally:
            print("test_piece_rank is over")

    def test_piece_file(self):
        try:
            self.assertEqual(self.pawn31.position.file, 1)
            self.assertEqual(self.pawn82.position.file, 2)

            self.assertEqual(self.piece.position.file, 0) #illegal value
            self.assertEqual(self.rook.position.file, 1)
            self.assertEqual(self.knight.position.file, 2)
            self.assertEqual(self.bishop.position.file, 3)
            self.assertEqual(self.queen.position.file, 4)
            self.assertEqual(self.king.position.file, 5)
        except Exception as exc:
            print("Piece file test : " + exc.__str__())
        finally:
            print("test_piece_file is over")

    def test_GetToScreenCoords(self):
        pass

if __name__ == '__main__':

    unittest.main()
